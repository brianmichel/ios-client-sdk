version: 2.1

jobs:
  contract-tests:
    macos:
      xcode: '15.0.0'

    steps:
      - checkout

      - run:
          name: Install swift lint
          command: brew install swiftlint
      - run:
          name: Run swiftlint
          command: |
            cd ./ContractTests
            swiftlint lint --reporter junit | tee /tmp/contract-test-swiftlint-results.xml
      - store_artifacts:
          path: /tmp/contract-test-swiftlint-results.xml
      - store_test_results:
          path: /tmp/contract-test-swiftlint-results.xml

      - run:
          name: Install required ssl libraries
          command: brew install libressl
      - run:
          name: make test output directory
          command: mkdir /tmp/test-results
      - run: make build-contract-tests
      - run:
          command: make start-contract-test-service
          background: true
      - run:
          name: wait for contract test service to be ready
          command: sleep 5
      - run:
          name: run contract tests
          command: TEST_HARNESS_PARAMS="-junit /tmp/test-results/contract-tests-junit.xml" make run-contract-tests
      - store_test_results:
          path: /tmp/test-results/

  build:
    parameters:
      xcode-version:
        type: string
      ios-sim:
        type: string
      build-doc:
        type: boolean
        default: false
      run-lint:
        type: boolean
        default: false

    shell: /bin/bash --login -eo pipefail

    macos:
      xcode: <<parameters.xcode-version>>
    resource_class: macos.m1.medium.gen1

    steps:
    - checkout

    # XCode11 has a bug related to respecting system known_hosts.  The CircleCI checkout
    # step is automatically setting all git URLs to use ssh.  Since we do not have any
    # private dependencies in this repo, it is ok to not us SSH for fetching the dependencies
    - run:
        name: Remove Git SSH restriction (XCode 11 bug workaround)
        command: git config --global --remove-section url."ssh://git@github.com"

    - run:
        name: Setup for builds
        command: |
          mkdir -p 'test-results'
          mkdir -p 'artifacts'

    - run:
        name: Build for macOS
        command: xcodebuild build -scheme 'LaunchDarkly_macOS' -sdk macosx -destination 'platform=macOS' | tee 'artifacts/raw-logs-macosx.txt' | xcpretty -r junit -o 'test-results/platform-macosx/junit.xml'
        when: always

    - run:
        name: Build Tests for iOS device
        command: xcodebuild build-for-testing -scheme 'LaunchDarkly_iOS' -sdk iphoneos CODE_SIGN_IDENTITY= | tee 'artifacts/raw-logs-iphoneos.txt' | xcpretty
        when: always

    - run:
        name: Build & Test on iOS Simulator
        command: xcodebuild test -scheme 'LaunchDarkly_iOS' -sdk iphonesimulator -destination '<<parameters.ios-sim>>' CODE_SIGN_IDENTITY= | tee 'artifacts/raw-logs-iphonesimulator.txt' | xcpretty -r junit -o 'test-results/platform-iphonesimulator/junit.xml'
        when: always

    - run:
        name: Build for tvOS device
        command: xcodebuild build -scheme 'LaunchDarkly_tvOS' -sdk appletvos CODE_SIGN_IDENTITY= | tee 'artifacts/raw-logs-appletvos.txt' | xcpretty
        when: always

    - run:
        name: Build for tvOS Simulator
        command: xcodebuild build -scheme 'LaunchDarkly_tvOS' -sdk appletvsimulator -destination 'platform=tvOS Simulator,name=Apple TV' | tee 'artifacts/raw-logs-appletvsimulator.txt' | xcpretty -r junit -o 'test-results/platform-appletvsimulator/junit.xml'
        when: always

    - run:
        name: Build for watchOS simulator
        command: xcodebuild build -scheme 'LaunchDarkly_watchOS' -sdk watchsimulator | tee 'artifacts/raw-logs-watchsimulator.txt' | xcpretty
        when: always

    - run:
        name: Build for watchOS device
        command: xcodebuild build -scheme 'LaunchDarkly_watchOS' -sdk watchos | tee 'artifacts/raw-logs-watchos.txt' | xcpretty
        when: always

    - run:
        name: Build & Test with swiftpm
        command: swift test -v 2>&1 | tee 'artifacts/raw-logs-swiftpm.txt' | xcpretty -r junit -o 'test-results/swiftpm/junit.xml'
        when: always

    - when:
        condition: <<parameters.build-doc>>
        steps:
          - restore_cache:
              key: v1-gem-cache-<<parameters.xcode-version>>-

          - run:
              name: Install jazzy gem
              command: |
                gem install jazzy
                gem cleanup
                # Used as cache key to prevent storing redundant caches
                gem list > /tmp/cache-key.txt

          - save_cache:
              key: v1-gem-cache-<<parameters.xcode-version>>-{{ checksum "/tmp/cache-key.txt" }}
              paths:
                - ~/.gem

          - run:
              name: Build Documentation
              command: jazzy -o artifacts/docs

    - when:
        condition: <<parameters.run-lint>>
        steps:
          - run:
              name: CocoaPods spec lint
              command: |
                if [ "$CIRCLE_BRANCH" = 'main' ]; then
                  pod spec lint
                else
                  pod lib lint
                fi

    - store_test_results:
        path: test-results

    - store_artifacts:
        path: artifacts

workflows:
  version: 2

  build:
    jobs:
      - build:
          name: Xcode 15.0.0 - Swift 5.9
          xcode-version: '15.0.0'
          ios-sim: 'platform=iOS Simulator,name=iPhone 15,OS=17.0.1'
      - build:
          name: Xcode 14.0 - Swift 5.7
          xcode-version: '14.0.1'
          ios-sim: 'platform=iOS Simulator,name=iPhone 14,OS=16.0'
      - build:
          name: Xcode 13.4.1 - Swift 5.6
          xcode-version: '13.4.1'
          ios-sim: 'platform=iOS Simulator,name=iPhone 13,OS=15.5'
      - contract-tests
